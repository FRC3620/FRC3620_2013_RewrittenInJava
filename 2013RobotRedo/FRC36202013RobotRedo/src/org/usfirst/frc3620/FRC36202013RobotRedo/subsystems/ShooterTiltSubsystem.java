// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3620.FRC36202013RobotRedo.subsystems; 
import org.usfirst.frc3620.FRC36202013RobotRedo.RobotMap;
import org.usfirst.frc3620.FRC36202013RobotRedo.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc3620.FRC36202013RobotRedo.Robot;
/**
 *
 */
public class ShooterTiltSubsystem extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogChannel ShooterTiltSensor = RobotMap.shooterTiltSubsystemShooterTiltSensor;
    SpeedController ShooterTiltController = RobotMap.shooterTiltSubsystemShooterTiltController;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Initialize your subsystem here
    
    public static final double upper = 2.18, lower = .8;
    
    public ShooterTiltSubsystem() {
  
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("BodyThing", 0.5, 0.03, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("BodyThing", "PIDSubsystem Controller", getPIDController());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
       
       
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
	 System.out.println(2.18 - ShooterTiltSensor.getAverageVoltage());// error
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return ShooterTiltSensor.getAverageVoltage();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
       
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
	System.out.println("setting power to" + output);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        ShooterTiltController.pidWrite(output);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    public void off() {
             disable();
        ShooterTiltController.set(0.0);
     
    }
    private boolean tiltison = false;
    private boolean tiltIsHigh = false;
    
    public void enableShooterTilt(){
         System.out.println("enable");
       enable();
       tiltison = true;
       tiltIsHigh = false;
       setSetpoint(lower);
    }
    public void disableShooterTilt(){
        System.out.println("disable");
        disable();
        tiltison = false;
        ShooterTiltController.set(0.0);
    }
    public void toggleShooterTilt(){
        if(tiltison) {
            disableShooterTilt();
           
        }
        else {
            enableShooterTilt();
        }
    }
    public void bumpAngleUp(){
        System.out.println("angle up");
        if(tiltIsHigh) {//already at highest position
        }
        else {
            setSetpoint(upper);
        }
        System.out.println("new angle is" + getSetpoint());
        tiltIsHigh = true;
    }
    public void bumpAngleDown(){
           System.out.println("angle down");
        if(tiltIsHigh){
            setSetpoint(lower);
        }
        else{
        // already at lowest position
        }
        tiltIsHigh = false;
         System.out.println("new angle is" + getSetpoint());
    }
        
    }

