// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3620.FRC36202013RobotRedo.subsystems;

import org.usfirst.frc3620.FRC36202013RobotRedo.HarvesterDirection;
import org.usfirst.frc3620.FRC36202013RobotRedo.RobotMap;
import org.usfirst.frc3620.FRC36202013RobotRedo.commands.*;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3620.FRC36202013RobotRedo.Robot;
import org.usfirst.frc3620.FRC36202013RobotRedo.RobotMode;

/**
 *
 */
public class HarversterSubsystem extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    SpeedController harvesterController = RobotMap.harversterSubsystemHarvesterController;
    Relay beltController = RobotMap.harversterSubsystemBeltController;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new HarvesterRunCommand());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    boolean onOffState = false;
    HarvesterDirection beltDirection = HarvesterDirection.OFF;
    HarvesterDirection harvesterDirection = HarvesterDirection.OFF;

    public void setOnOffState(boolean b) {
        onOffState = b;
    }

    public boolean getOnOffState() {
        return onOffState;
    }

    public void setBeltDirection(HarvesterDirection direction) {
        beltDirection = direction;
    }

    public void setHarvesterDirection(HarvesterDirection direction) {
        harvesterDirection = direction;
    }

    public void onRobotModeChange(RobotMode robotMode) {
        onOffState = false;
        beltDirection = HarvesterDirection.OFF;
        harvesterDirection = HarvesterDirection.OFF;
        harvesterOff();
        beltOff();
    }

    public void periodic(RobotMode robotMode) {
        if (robotMode == RobotMode.AUTONOMOUS || robotMode == RobotMode.TELEOP) {
            if (harvesterDirection == HarvesterDirection.OFF) {
                // controller panel switch is in middle, decide what to do
                // based on the toggled on or off state
                if (onOffState) {
                    harvesterIn();
                } else {
                    harvesterOff();
                }
            } else if (harvesterDirection == HarvesterDirection.IN) {
                harvesterIn();
            } else {
                harvesterOut();
            }

            if (beltDirection == HarvesterDirection.OFF) {
                // controller panel switch is in middle, decide what to do
                // based on the toggled on or off state
                if (onOffState) {
                    beltIn();
                } else {
                    beltOff();
                }
            } else if (beltDirection == HarvesterDirection.IN) {
                beltIn();
            } else {
                beltOut();
            }
        } else if (robotMode == RobotMode.DISABLED) {
            harvesterOff();
            beltOff();
        }
    }

    void harvesterOff() {
        harvesterController.set(0);
    }

    void harvesterIn() {
        harvesterController.set(1);
    }

    void harvesterOut() {
        harvesterController.set(-1);
    }

    void beltOff() {
        beltController.set(Relay.Value.kOff);
    }

    void beltIn() {
        beltController.set(Relay.Value.kForward);
    }

    void beltOut() {
        beltController.set(Relay.Value.kReverse);
    }


}
