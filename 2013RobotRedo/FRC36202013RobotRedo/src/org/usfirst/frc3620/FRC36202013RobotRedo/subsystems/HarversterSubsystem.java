// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3620.FRC36202013RobotRedo.subsystems;
import org.usfirst.frc3620.FRC36202013RobotRedo.HarvesterDirection;
import org.usfirst.frc3620.FRC36202013RobotRedo.RobotMap;
import org.usfirst.frc3620.FRC36202013RobotRedo.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3620.FRC36202013RobotRedo.AverageJoeUtils;
import org.usfirst.frc3620.FRC36202013RobotRedo.RobotMode;
/**
 *
 */
public class HarversterSubsystem extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController wheelsController = RobotMap.harversterSubsystemWheelsController;
    Relay beltController = RobotMap.harversterSubsystemBeltController;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new HarvesterRunCommand());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    boolean onOffState = false;
    HarvesterDirection beltDirection = HarvesterDirection.OFF;
    HarvesterDirection wheelsDirection = HarvesterDirection.OFF;
    
    public void setOnOffState(boolean b) {
        this.onOffState = b;
    }
    public boolean getOnOffState() {
        return this.onOffState;
    }
    
    public void toggleOnOffState() {
        synchronized (this) {
            this.onOffState = ! this.onOffState;
        }
    }
    public void setBeltDirection(HarvesterDirection direction) {
        this.beltDirection = direction;
    }
    public HarvesterDirection getBeltDirection() {
        return this.beltDirection;
    }
    public void setWheelsDirection(HarvesterDirection direction) {
        this.wheelsDirection = direction;
    }
    public HarvesterDirection getWheelsDirection() {
        return this.wheelsDirection;
    }
    public void wheelsOff() {
        wheelsController.set(0);
    }
    public void wheelsIn() {
        wheelsController.set(1);
    }
    public void wheelsOut() {
        wheelsController.set(-1);
    }
    public void beltOff() {
        beltController.set(Relay.Value.kOff);
    }
    public void beltIn() {
        beltController.set(Relay.Value.kForward);
    }
    public void beltOut() {
        beltController.set(Relay.Value.kReverse);
    }
    public void onRobotModeChange(RobotMode robotMode) {
        setOnOffState(false);
    }
    public void periodic(RobotMode robotMode) {
        SmartDashboard.putNumber("harvester.wheels", wheelsController.get());
        SmartDashboard.putString("harvester.belt", AverageJoeUtils.relayValueString(beltController.get()));
    }
}
