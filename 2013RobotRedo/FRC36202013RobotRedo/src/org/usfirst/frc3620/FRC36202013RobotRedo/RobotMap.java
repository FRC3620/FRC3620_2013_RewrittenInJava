// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3620.FRC36202013RobotRedo;
    
import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; 
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.Jaguar;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.livewindow.*;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveSubsystemLeftDriveController;
    public static SpeedController driveSubsystemRightDriveController;
    public static RobotDrive driveSubsystemPrimaryDrive;
    public static SpeedController driveSubsystemLeftTurboController;
    public static SpeedController driveSubsystemRightTurboController;
    public static RobotDrive driveSubsystemSecondaryDrive;
    public static Gyro driveSubsystemGyro;
    public static Encoder driveSubsystemDriveEncoder;
    public static SpeedController liftSubsystemChinupController;
    public static SpeedController shooterTiltSubsystemShooterTiltController;
    public static AnalogChannel shooterTiltSubsystemShooterTiltSensor;
    public static PIDController shooterTiltSubsystemShooterTiltPID;
    public static SpeedController shooterSubsystemBackShooterController;
    public static SpeedController shooterSubsystemFrontShooterController;
    public static Relay flipperSubsystemFlipperSpike;
    public static SpeedController harversterSubsystemWheelsController;
    public static Relay harversterSubsystemBeltController;
    public static AnalogChannel augerSubsystemAugerEncoder;
    public static DigitalInput augerSubsystemAugerLimitSwitch;
    public static SpeedController augerSubsystemAugerController;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSubsystemLeftDriveController = new Jaguar(1, 1);
	LiveWindow.addActuator("DriveSubsystem", "LeftDriveController", (Jaguar) driveSubsystemLeftDriveController);
        
        driveSubsystemRightDriveController = new Jaguar(1, 2);
	LiveWindow.addActuator("DriveSubsystem", "RightDriveController", (Jaguar) driveSubsystemRightDriveController);
        
        driveSubsystemPrimaryDrive = new RobotDrive(driveSubsystemLeftDriveController, driveSubsystemRightDriveController);
	
        driveSubsystemPrimaryDrive.setSafetyEnabled(true);
        driveSubsystemPrimaryDrive.setExpiration(0.1);
        driveSubsystemPrimaryDrive.setSensitivity(0.5);
        driveSubsystemPrimaryDrive.setMaxOutput(1.0);
        driveSubsystemPrimaryDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);        
        driveSubsystemLeftTurboController = new Jaguar(1, 4);
	LiveWindow.addActuator("DriveSubsystem", "LeftTurboController", (Jaguar) driveSubsystemLeftTurboController);
        
        driveSubsystemRightTurboController = new Jaguar(1, 3);
	LiveWindow.addActuator("DriveSubsystem", "RightTurboController", (Jaguar) driveSubsystemRightTurboController);
        
        driveSubsystemSecondaryDrive = new RobotDrive(driveSubsystemLeftTurboController, driveSubsystemRightTurboController);
	
        driveSubsystemSecondaryDrive.setSafetyEnabled(true);
        driveSubsystemSecondaryDrive.setExpiration(0.1);
        driveSubsystemSecondaryDrive.setSensitivity(0.5);
        driveSubsystemSecondaryDrive.setMaxOutput(1.0);
        driveSubsystemSecondaryDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);        
        driveSubsystemGyro = new Gyro(1, 1);
	LiveWindow.addSensor("DriveSubsystem", "Gyro", driveSubsystemGyro);
        driveSubsystemGyro.setSensitivity(0.007);
        driveSubsystemDriveEncoder = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
	LiveWindow.addSensor("DriveSubsystem", "DriveEncoder", driveSubsystemDriveEncoder);
        driveSubsystemDriveEncoder.setDistancePerPulse(1.0);
        driveSubsystemDriveEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveSubsystemDriveEncoder.start();
        liftSubsystemChinupController = new Victor(1, 6);
	LiveWindow.addActuator("LiftSubsystem", "ChinupController", (Victor) liftSubsystemChinupController);
        
        shooterTiltSubsystemShooterTiltController = new Victor(1, 7);
	LiveWindow.addActuator("ShooterTiltSubsystem", "ShooterTiltController", (Victor) shooterTiltSubsystemShooterTiltController);
        
        shooterTiltSubsystemShooterTiltSensor = new AnalogChannel(1, 3);
	LiveWindow.addSensor("ShooterTiltSubsystem", "ShooterTiltSensor", shooterTiltSubsystemShooterTiltSensor);
        
        shooterTiltSubsystemShooterTiltPID = new PIDController(1.0, 0.0, 0.0, 0.0, shooterTiltSubsystemShooterTiltSensor, shooterTiltSubsystemShooterTiltController, 0.02);
	LiveWindow.addActuator("ShooterTiltSubsystem", "ShooterTiltPID", shooterTiltSubsystemShooterTiltPID);
        shooterTiltSubsystemShooterTiltPID.setContinuous(false); shooterTiltSubsystemShooterTiltPID.setAbsoluteTolerance(0.2); 
        shooterTiltSubsystemShooterTiltPID.setOutputRange(-1.0, 1.0);        
        shooterSubsystemBackShooterController = new Talon(1, 10);
	LiveWindow.addActuator("ShooterSubsystem", "BackShooterController", (Talon) shooterSubsystemBackShooterController);
        
        shooterSubsystemFrontShooterController = new Talon(1, 9);
	LiveWindow.addActuator("ShooterSubsystem", "FrontShooterController", (Talon) shooterSubsystemFrontShooterController);
        
        flipperSubsystemFlipperSpike = new Relay(1, 2);
	LiveWindow.addActuator("FlipperSubsystem", "FlipperSpike", flipperSubsystemFlipperSpike);
        
        harversterSubsystemWheelsController = new Victor(1, 8);
	LiveWindow.addActuator("HarversterSubsystem", "WheelsController", (Victor) harversterSubsystemWheelsController);
        
        harversterSubsystemBeltController = new Relay(1, 1);
	LiveWindow.addActuator("HarversterSubsystem", "BeltController", harversterSubsystemBeltController);
        
        augerSubsystemAugerEncoder = new AnalogChannel(1, 7);
	LiveWindow.addSensor("AugerSubsystem", "AugerEncoder", augerSubsystemAugerEncoder);
        
        augerSubsystemAugerLimitSwitch = new DigitalInput(1, 5);
	LiveWindow.addSensor("AugerSubsystem", "AugerLimitSwitch", augerSubsystemAugerLimitSwitch);
        
        augerSubsystemAugerController = new Victor(1, 5);
	LiveWindow.addActuator("AugerSubsystem", "AugerController", (Victor) augerSubsystemAugerController);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
