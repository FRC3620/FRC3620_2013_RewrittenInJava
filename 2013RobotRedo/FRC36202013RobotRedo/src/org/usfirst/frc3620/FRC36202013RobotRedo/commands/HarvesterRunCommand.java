// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3620.FRC36202013RobotRedo.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3620.FRC36202013RobotRedo.HarvesterDirection;
import org.usfirst.frc3620.FRC36202013RobotRedo.Robot;
import org.usfirst.frc3620.FRC36202013RobotRedo.RobotMode;
import org.usfirst.frc3620.FRC36202013RobotRedo.subsystems.HarversterSubsystem;
/**
 *
 */
public class  HarvesterRunCommand extends Command {
    HarversterSubsystem harvesterSubsystem = Robot.harversterSubsystem;
    public HarvesterRunCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.harversterSubsystem);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
    }
    // Called repeatedly when this Command is scheduled to run

    protected void execute() {
        boolean onOffState = harvesterSubsystem.getOnOffState();
        HarvesterDirection wheelsDirection = harvesterSubsystem.getWheelsDirection();
        HarvesterDirection beltDirection = harvesterSubsystem.getBeltDirection();
        
        SmartDashboard.putString ("debug.harvesterButtons", onOffState + " " + wheelsDirection + " " + beltDirection);
        
        if (wheelsDirection == HarvesterDirection.OFF) {
            // controller panel switch is in middle, decide what to do
            // based on the toggled on or off state
            if (harvesterSubsystem.getOnOffState()) {
                harvesterSubsystem.wheelsIn();
            } else {
                harvesterSubsystem.wheelsOff();
            }
        } else if (wheelsDirection == HarvesterDirection.IN) {
            harvesterSubsystem.wheelsIn();
        } else {
            harvesterSubsystem.wheelsOut();
        }
        if (beltDirection == HarvesterDirection.OFF) {
            // controller panel switch is in middle, decide what to do
            // based on the toggled on or off state
            if (onOffState) {
                harvesterSubsystem.beltIn();
            } else {
                harvesterSubsystem.beltOff();
            }
        } else if (beltDirection == HarvesterDirection.IN) {
            harvesterSubsystem.beltIn();
        } else {
            harvesterSubsystem.beltOut();
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true

    protected void end() {
        harvesterSubsystem.wheelsOff();
        harvesterSubsystem.beltOff();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
