// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc3620.FRC36202013RobotRedo;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3620.FRC36202013RobotRedo.commands.*;
import org.usfirst.frc3620.FRC36202013RobotRedo.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveSubsystem driveSubsystem;
    public static LiftSubsystem liftSubsystem;
    public static ShooterTiltSubsystem shooterTiltSubsystem;
    public static ShooterSubsystem shooterSubsystem;
    public static FlipperSubsystem flipperSubsystem;
    public static HarversterSubsystem harversterSubsystem;
    public static AugerSubsystem augerSubsystem;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSubsystem = new DriveSubsystem();
        liftSubsystem = new LiftSubsystem();
        shooterTiltSubsystem = new ShooterTiltSubsystem();
        shooterSubsystem = new ShooterSubsystem();
        flipperSubsystem = new FlipperSubsystem();
        harversterSubsystem = new HarversterSubsystem();
        augerSubsystem = new AugerSubsystem();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        oi = new OI();
	
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        autonomousCommand = new AutonomousBoxCommand();
    }

    public void autonomousInit() {
        onRobotModeChange(RobotMode.AUTONOMOUS);
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        periodic(RobotMode.AUTONOMOUS);
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        onRobotModeChange(RobotMode.TELEOP);
	// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        periodic(RobotMode.TELEOP);
        Scheduler.getInstance().run();
    }
    
    public void testInit() {
        onRobotModeChange(RobotMode.TEST);
    }
    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
        periodic(RobotMode.TEST);
        LiveWindow.run();
    }
    
    public void disabledInit() {
        onRobotModeChange(RobotMode.DISABLED);
    }
    /**
     * This function called periodically during test mode
     */
    public void disabledPeriodic() {
        periodic(RobotMode.DISABLED);
    }
    
    void onRobotModeChange (RobotMode robotMode) {
        driveSubsystem.onRobotModeChange(robotMode);
        harversterSubsystem.onRobotModeChange(robotMode);
        
        SmartDashboard.putString("Mode", robotMode.toString());
    }
    
    void periodic (RobotMode robotMode) {
       driveSubsystem.periodic(robotMode);
       harversterSubsystem.periodic(robotMode);
       
       SmartDashboard.putNumber("Voltage", DriverStation.getInstance().getBatteryVoltage());
       SmartDashboard.putNumber("MatchTime", DriverStation.getInstance().getMatchTime());
    }
}
